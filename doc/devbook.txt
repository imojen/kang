# Dev Book : Création d'un jeu de Vaisseau Spatial en Angular

## Introduction

Ce Dev Book vous guidera à travers les étapes de développement du jeu "Vaisseau Spatial" en Angular. Le jeu consiste à contrôler un vaisseau qui suit la souris, tout en évitant des corps célestes (astéroïdes, planètes, etc.). Le joueur dispose de 3 vies, et chaque collision avec un corps céleste fait perdre une vie. Le jeu se termine lorsque le joueur n’a plus de vies.

---

## Fonctionnalités du jeu

Voici les principales fonctionnalités à implémenter pour compléter ce projet.

---

## 1. **Création et gestion du vaisseau**

### 1.1 **Suivi de la souris avec inertie**
- **Objectif** : Le vaisseau doit suivre la souris avec un effet d'inertie.
- **Détails** :
  - Capturer la position de la souris via l'événement `mousemove`.
  - Calculer la direction vers la souris et appliquer une vitesse qui décélère avec le temps (inertie).
  - Assurer que le vaisseau ne dépasse pas les bords du canvas.

### 1.2 **Limitation des mouvements**
- **Objectif** : Le vaisseau ne doit pas sortir du cadre de l'écran.
- **Détails** :
  - Empêcher le vaisseau de dépasser les bords du canvas (par exemple, si la position dépasse la largeur de 800px ou la hauteur de 600px).

### 1.3 **Affichage du vaisseau**
- **Objectif** : Dessiner le vaisseau à l'écran sous forme d'un cercle ou d'une forme simple.
- **Détails** :
  - Utiliser la méthode `arc()` du canvas pour dessiner un cercle représentant le vaisseau à la position calculée.

---

## 2. **Création des astéroïdes (ou corps célestes)**

### 2.1 **Génération aléatoire d'astéroïdes**
- **Objectif** : Créer des astéroïdes qui apparaissent aléatoirement à différentes positions sur l'écran.
- **Détails** :
  - Générer un astéroïde avec une position et un rayon aléatoires.
  - Ajouter un léger mouvement à chaque astéroïde pour simuler la dérive dans l'espace.
  - Gérer l'apparition des astéroïdes à intervalles réguliers (par exemple, toutes les 2 secondes).

### 2.2 **Déplacement des astéroïdes**
- **Objectif** : Faire bouger les astéroïdes verticalement ou horizontalement dans le canvas.
- **Détails** :
  - Appliquer un mouvement continu aux astéroïdes.
  - Refaire apparaître un astéroïde à une position aléatoire lorsqu'il dépasse le bord de l'écran.

### 2.3 **Affichage des astéroïdes**
- **Objectif** : Dessiner chaque astéroïde sur le canvas.
- **Détails** :
  - Utiliser `arc()` pour dessiner chaque astéroïde avec un rayon aléatoire.

---

## 3. **Gestion des collisions**

### 3.1 **Détection de collision entre le vaisseau et les astéroïdes**
- **Objectif** : Détecter les collisions entre le vaisseau et les astéroïdes.
- **Détails** :
  - Vérifier la distance entre le vaisseau et chaque astéroïde.
  - Si la distance est inférieure à la somme des rayons du vaisseau et de l'astéroïde, une collision a lieu.
  - À chaque collision, le joueur perd une vie.

### 3.2 **Perte de vie après collision**
- **Objectif** : Réduire le nombre de vies du joueur après une collision.
- **Détails** :
  - Décrémenter le nombre de vies à chaque collision.
  - Si le nombre de vies atteint zéro, afficher un message "Game Over".

### 3.3 **Affichage des vies restantes**
- **Objectif** : Afficher le nombre de vies restantes.
- **Détails** :
  - Mettre à jour l'overlay pour afficher les vies restantes en temps réel.

---

## 4. **Gestion du temps et du score**

### 4.1 **Chronomètre de jeu**
- **Objectif** : Afficher le temps écoulé depuis le début du jeu.
- **Détails** :
  - Créer un chronomètre qui augmente à chaque frame (ou à chaque seconde).
  - Afficher le temps dans l'overlay en haut de l'écran.

### 4.2 **Gestion du score (temps de survie)**
- **Objectif** : Utiliser le temps écoulé comme critère de performance.
- **Détails** :
  - Le score sera basé sur le temps passé sans collision.
  - Plus le joueur survit longtemps, plus son score est élevé.

### 4.3 **Affichage du score**
- **Objectif** : Afficher le score dans l'overlay.
- **Détails** :
  - Mettre à jour le score à chaque frame, en fonction du temps écoulé.
  - Afficher le score dans l'overlay sous le temps.

---

## 5. **Gestion de la fin du jeu (Game Over)**

### 5.1 **Détection de la fin du jeu**
- **Objectif** : Déterminer quand le joueur a perdu toutes ses vies.
- **Détails** :
  - Lorsque les vies atteignent zéro, arrêter le jeu et afficher un message "Game Over".
  - Proposer une option pour redémarrer le jeu (facultatif).

### 5.2 **Affichage du message "Game Over"**
- **Objectif** : Afficher un message indiquant la fin du jeu.
- **Détails** :
  - Lorsque le joueur n'a plus de vies, afficher le message "Game Over" au centre du canvas.
  - Ajouter la possibilité de redémarrer le jeu si le joueur clique ou appuie sur une touche.

---

## 6. **Améliorations et fonctionnalités optionnelles**

### 6.1 **Effets visuels et animations**
- **Objectif** : Ajouter des effets visuels pour rendre le jeu plus attrayant.
- **Détails** :
  - Ajouter des animations comme une explosion lorsqu'une collision se produit.
  - Ajouter un effet de particules pour les astéroïdes qui disparaissent.

### 6.2 **Niveaux et difficulté croissante**
- **Objectif** : Ajouter de la difficulté au jeu au fur et à mesure que le joueur progresse.
- **Détails** :
  - Augmenter la vitesse des astéroïdes à chaque niveau.
  - Ajouter de nouveaux types de corps célestes ou d'obstacles à mesure que le jeu progresse.

### 6.3 **Ajout de sons**
- **Objectif** : Ajouter des effets sonores pour améliorer l'expérience de jeu.
- **Détails** :
  - Ajouter des sons pour les collisions, les explosions et la musique de fond.
  - Utiliser la Web Audio API pour la gestion des sons dans le jeu.

### 6.4 **Écran de menu et options**
- **Objectif** : Ajouter un menu de démarrage et des options de jeu.
- **Détails** :
  - Afficher un écran d'accueil avec un bouton "Jouer".
  - Ajouter des options pour régler la difficulté ou les effets sonores.

---

## 7. **Tests et débogage**

### 7.1 **Tests de performance**
- **Objectif** : Tester la fluidité du jeu et l'impact des astéroïdes et des mouvements sur la performance.
- **Actions** :
  - Vérifier la performance du jeu sur différents navigateurs.
  - Optimiser les algorithmes de déplacement et de collision si nécessaire.

### 7.2 **Tests des fonctionnalités**
- **Objectif** : Tester toutes les fonctionnalités du jeu.
- **Actions** :
  - Vérifier que les astéroïdes apparaissent correctement et se déplacent comme prévu.
  - Tester la détection de collision et la gestion des vies.
  - Tester le chronomètre et l'affichage du score.

---

## Conclusion

Ce Dev Book vous guide à travers la création d'un jeu de vaisseau spatial en Angular, en détaillant toutes les étapes du développement, de la gestion des entrées utilisateur à la détection des collisions, en passant par l'affichage du score et des vies. En suivant ce guide, vous serez en mesure de créer un jeu complet et fonctionnel.